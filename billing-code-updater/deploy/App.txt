<!DOCTYPE html>
<html>
<head>
    <title>Billing Code Updater</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Thu Jul 30 2015 10:50:20 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Jul 30 2015 10:50:20 GMT-0700 (PDT)";
        var CHECKSUM = 3322431174;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define("TSBillCodeUpdater", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    billingCodeKeyPrefix: 'com.rallydev.technicalservices.billingcode',
    items: [
        {   
            xtype:'container',
            itemId:'summary_box', 
            tpl: '<tpl>{filtered} users currently do not have a billing code out of {total}</tpl>'
        },
        {xtype:'container',itemId:'grid_box'}
    ],
    
    config: {
        defaultSettings: {
            billingFieldName :  'NetworkID'
        }
    },

    
    launch: function() {
        var me = this;
        this.setLoading("Loading users...");
        
        Deft.Promise.all([
             this._getUserStore()//,
             /* in case we change over to prefs */
//             this._getUsers(),
//             this._getBillingCodes() 
        ]).then({
            scope: this,
            success: function(results) {
                var user_store = results[0];
                //var codes = results[1];
                //var store = this._sortDataIntoStore(users,codes);
                //this.down('#summary_box').update();
                var me = this;
                var all_user_count = user_store.totalCount;
                
                // filter second so we can get a count before we update the grid
                user_store.on('load', function(store) {
                    var filtered_user_count = store.totalCount;
                    me.down('#summary_box').update({'total':all_user_count, 'filtered': filtered_user_count});
                    
                    me._displayGrid(store); 
                    
                },{scope: this, single: true});
                
                user_store.addFilter( {property:me.getSetting('billingFieldName'), operator: '=', value: '' }, true);
            },
            failure: function(error_message){
                alert(error_message);
            }
        }).always(function() {
            me.setLoading(false);
        });
    },
    
    _getUsers: function() {
        var model_name = 'User',
            field_names = ['UserName','FirstName','LastName','ObjectID',this.getSetting('billingFieldName')],
            sorters = [{property:'UserName'}];
        
        return this._loadRecordsWithAPromise(model_name, field_names, [], sorters);
    },
    
    _getUserStore: function() {
        var model_name = 'User',
            field_names = ['UserName','FirstName','LastName','ObjectID',this.getSetting('billingFieldName')],
            filters = [{property:'Disabled', value: false}];
            sorters = [{property:'UserName'}];
        
        return this._loadStoreWithAPromise(model_name, field_names, filters, sorters);
    },
    
    _getBillingCodes: function() {
        var model_name = 'Preference',
            field_names = ['Name','Value','ObjectID'],
            filters = [{property:'Name',operator:'contains', value: this.billingCodeKeyPrefix}];
        
        return this._loadRecordsWithAPromise(model_name, field_names, filters,[]);
    },
    
    _sortDataIntoStore: function(users,codes) {
        
        var user_data = Ext.Array.map(users,function(user){
            return user.getData();
        });
        
        return Ext.create('Rally.data.custom.Store', {
            data: user_data
        });
    },
    
    _loadRecordsWithAPromise: function(model_name, model_fields, filters, sorters){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        this.logger.log("Starting load:",model_name,model_fields);
          
        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields,
            sorters: sorters,
            filters: filters
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    _loadStoreWithAPromise: function(model_name, model_fields, filters, sorters){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        this.logger.log("Starting load:",model_name,model_fields);
          
        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields,
            sorters: sorters,
            filters: filters
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(this);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    _getColumns: function() {
        return [
            {dataIndex: 'UserName', text:'id'},
            {dataIndex: 'FirstName', text:'First Name'},
            {dataIndex: 'LastName',text:'Last Name'},
            {dataIndex: this.getSetting('billingFieldName'), text:'Billing Code'}
        ];
    },
    
    _displayGrid: function(store){
        var container = this.down('#grid_box');
        container.removeAll();
        container.add({
            xtype: 'rallygrid',
            store: store,
            showRowActionsColumn: false,
            columnCfgs: this._getColumns()
        });
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    getSettingsFields: function() {
        return [{
            name: 'billingFieldName',
            xtype: 'rallyfieldcombobox',
            model: Ext.identityFn('User'),
            fieldLabel: 'Billing Field:',
            margin: '10 0 0 0',
            readyEvent: 'ready',
            _isNotHidden: function(field) {
                if ( field.hidden  ) {
                    return false;
                }
                
                var attr = field.attributeDefinition;
                if ( attr.ReadOnly) {
                    return false;
                }
                
                console.log(field.name, attr);
                
                return ( /* attr.Custom && */
                    !_.contains(['web_link', 'text', 'date', 'boolean'], attr.AttributeType.toLowerCase()) );
            }
        }];
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('TSBillCodeUpdater', {
                   name: 'Billing Code Updater'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>