<!DOCTYPE html>
<html>
<head>
    <title>Billing Code Reporter</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Tue Aug 18 2015 16:11:39 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue Aug 18 2015 16:11:39 GMT-0700 (PDT)";
        var CHECKSUM = 4872638396;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.Toggle', {
    extend:'Ext.Container',
    alias:'widget.tstoggle',

    componentCls: 'rui-gridboard-toggle toggle-button-group',
    layout: 'hbox',
    border: 1,
    activeButtonCls: 'rly-active hide-tooltip',

    toggleState: 'summary',

    defaultType: 'rallybutton',
    items: [
        {
            itemId: 'detail',
            cls: 'toggle board rly-left',
            html: 'D',
            //iconCls: 'icon-board',
            frame: false,
            toolTipConfig: {
                html: 'Switch to Detail View',
                anchor: 'top',
                hideDelay: 0,
                constrainPosition: false/*,
                anchorOffset: 45,
                mouseOffset: [-45, 0]*/
            }
        },
        {
            itemId: 'summary',
            cls: 'toggle grid rly-right',
            html: 'S',
            //iconCls: 'icon-grid',
            frame: false,
            toolTipConfig: {
                html: 'Switch to Summary View',
                anchor: 'top',
                hideDelay: 0,
                constrainPosition: false/*,
                anchorOffset: 65,
                mouseOffset: [-65, 0]*/
            }
        }
    ],

    initComponent: function() {
        this.callParent(arguments);

        this.addEvents([
            /**
             * @event toggle
             * Fires when the toggle value is changed.
             * @param {String} toggleState 'summary' or 'detail'.
             */
            'toggle'
        ]);

        this.items.each(function(item) {
            this.mon(item, 'click', this._onButtonClick, this);
        }, this);

        this.down('#' + this.toggleState).addCls(this.activeButtonCls);
    },

    _onButtonClick: function(btn) {
        var btnId = btn.getItemId();
        if (btnId !== this.toggleState) {
            this.toggleState = btnId;

            this.items.each(function(item) {
                if (item === btn) {
                    if (!item.hasCls(this.activeButtonCls.split(' ')[0])) {
                        item.addCls(this.activeButtonCls);
                    }
                } else {
                    item.removeCls(this.activeButtonCls);
                }
            }, this);

            this.fireEvent('toggle', this, this.toggleState);
        }
    }
});
Ext.define("TSBillingCodeReport", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    billingCodeKeyPrefix: 'com.rallydev.technicalservices.billingcode',
    items: [
        {
            xtype:'container',
            itemId:'selector_box'
        },
        {   
            xtype:'container',
            itemId:'summary_box',
            toggleable: true,
            hidden: false
        },
        {
            xtype:'container',
            itemId:'detail_box',
            toggleable: true,
            hidden: true
        }
    ],
    
    config: {
        defaultSettings: {
            billingFieldName :  'NetworkID'
        }
    },

    
    launch: function() {
        var me = this;
        this.setLoading("Loading users...");
        
        var billing_field_name = this.getSetting('billingFieldName');
        
        this._getUsers().then({
            scope: this,
            success: function(users) {
                this._addToggle(this.down('#selector_box'));
                
                var users_by_code = this._getUsersByCode(users);
                var summary_data = this._getSummaryData(users_by_code);
                this._addSummaryGrid(this.down('#summary_box'), summary_data);
                
                this._addDetailGrid(this.down('#detail_box'), users_by_code);
            },
            failure: function(error_message){
                alert(error_message);
            }
        }).always(function() {
            me.setLoading(false);
        });
    },
    
    _getUsersByCode: function(users) {
        var billing_field_name = this.getSetting('billingFieldName');
        
        var users_by_code = {};
        
        Ext.Array.each(users, function(user){
            var code = user.get(billing_field_name);
            
            if ( !users_by_code[code] ) {
                users_by_code[code] = [];
            }
            
            users_by_code[code].push(user);
        });
        
        return users_by_code;
    },
    
    _addToggle: function(container) {
        container.add({
            xtype:'tstoggle',
            listeners: {
                scope: this,
                toggle: function(toggle, new_state) {
                    Ext.Array.each( this.query('{toggleable}'),function(box){
                        box.hide(true);
                    });
                    
                    this.down('#' + new_state + '_box').show(false);
                }
            }
        });
    },
    
    _getSummaryData: function(users_by_code){
        var data = [];
        Ext.Object.each(users_by_code, function(code,users){
            data.push({ 'code': code, 'count': users.length });
        });
        return data;
    },
    
    _addSummaryGrid: function(container, data){
        var store = Ext.create('Rally.data.custom.Store',{data:data});
        
        container.add({
            xtype:'rallygrid',
            store: store,
            showPagingToolbar: false,
            columnCfgs: [
                { text: 'Billing Code', dataIndex: 'code', width: 150 },
                { text: 'Total Rally Users', dataIndex: 'count', width: 150 }
            ]
        });
    },
    
    _addDetailGrid: function(container, data){
        Ext.Object.each(data, function(code,users){
            container.add({
                xtype:'container',
                margin: '15 5 5 5',
                tpl:'<tpl>Number of users for billing code {code}: {count}</tpl>'}
            ).update({'code':code,'count':users.length});
            
            var store = Ext.create('Rally.data.custom.Store',{
                data:users,
                pageSize: 5000,
                limit:5000
            });
        
            container.add({
                xtype:'rallygrid',
                margin: 5,
                store: store,
                showPagingToolbar: false,
                showRowActionsColumn: false,
                columnCfgs: [
                    { text: 'User', dataIndex: '_refObjectName', width: 150 },
                    { text: 'Email Address', dataIndex: 'UserName', width: 200 }
                ]
            });
        });

    },

    _getUsers: function() {
        var me = this;
        
        var model_name = 'User',
            field_names = ['UserName','FirstName','LastName','ObjectID',this.getSetting('billingFieldName')],
            sorters = [{property:'LastName'}],
            filters = [
                {property:me.getSetting('billingFieldName'), operator: '!=', value: '' },
                {property:'Disabled', operator: '!=', value: true}
            ];
        
        return this._loadRecordsWithAPromise(model_name, field_names, filters, sorters);
    },
    
    _loadRecordsWithAPromise: function(model_name, model_fields, filters, sorters){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        this.logger.log("Starting load:",model_name,model_fields);
          
        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields,
            sorters: sorters,
            filters: filters,
            limit: 'Infinity'
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    _loadStoreWithAPromise: function(model_name, model_fields, filters, sorters){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        this.logger.log("Starting load:",model_name,model_fields);
          
        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields,
            sorters: sorters,
            filters: filters,
            limit: 'Infinity'
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(this);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    _getColumns: function() {
        return [
            {dataIndex: 'UserName', text:'id'},
            {dataIndex: 'FirstName', text:'First Name'},
            {dataIndex: 'LastName',text:'Last Name'},
            {dataIndex: this.getSetting('billingFieldName'), text:'Billing Code'}
        ];
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    getSettingsFields: function() {
        return [{
            name: 'billingFieldName',
            xtype: 'rallyfieldcombobox',
            model: Ext.identityFn('User'),
            fieldLabel: 'Billing Field:',
            margin: '10 0 0 0',
            readyEvent: 'ready',
            _isNotHidden: function(field) {
                if ( field.hidden  ) {
                    return false;
                }
                
                var attr = field.attributeDefinition;
                if ( attr.ReadOnly) {
                    return false;
                }
                                
                return ( /* attr.Custom && */
                    !_.contains(['web_link', 'text', 'date', 'boolean'], attr.AttributeType.toLowerCase()) );
            }
        }];
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('TSBillingCodeReport', {
                   name: 'Billing Code Reporter'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>